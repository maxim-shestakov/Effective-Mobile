// Code generated by MockGen. DO NOT EDIT.
// Source: structures.go

// Package mock_structures is a generated GoMock package.
package mock_structures

import (
	structures "Effective-Mobile/internal/structures"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBService is a mock of DBService interface.
type MockDBService struct {
	ctrl     *gomock.Controller
	recorder *MockDBServiceMockRecorder
}

// MockDBServiceMockRecorder is the mock recorder for MockDBService.
type MockDBServiceMockRecorder struct {
	mock *MockDBService
}

// NewMockDBService creates a new mock instance.
func NewMockDBService(ctrl *gomock.Controller) *MockDBService {
	mock := &MockDBService{ctrl: ctrl}
	mock.recorder = &MockDBServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBService) EXPECT() *MockDBServiceMockRecorder {
	return m.recorder
}

// AddCar mocks base method.
func (m *MockDBService) AddCar(arg0 structures.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCar", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCar indicates an expected call of AddCar.
func (mr *MockDBServiceMockRecorder) AddCar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCar", reflect.TypeOf((*MockDBService)(nil).AddCar), arg0)
}

// AddOwner mocks base method.
func (m *MockDBService) AddOwner(arg0 structures.Owner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOwner", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOwner indicates an expected call of AddOwner.
func (mr *MockDBServiceMockRecorder) AddOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOwner", reflect.TypeOf((*MockDBService)(nil).AddOwner), arg0)
}

// DeleteCar mocks base method.
func (m *MockDBService) DeleteCar(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCar", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCar indicates an expected call of DeleteCar.
func (mr *MockDBServiceMockRecorder) DeleteCar(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCar", reflect.TypeOf((*MockDBService)(nil).DeleteCar), id)
}

// GetCars mocks base method.
func (m *MockDBService) GetCars() ([]structures.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCars")
	ret0, _ := ret[0].([]structures.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCars indicates an expected call of GetCars.
func (mr *MockDBServiceMockRecorder) GetCars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCars", reflect.TypeOf((*MockDBService)(nil).GetCars))
}

// UpdateCar mocks base method.
func (m *MockDBService) UpdateCar(arg0 structures.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCar", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCar indicates an expected call of UpdateCar.
func (mr *MockDBServiceMockRecorder) UpdateCar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCar", reflect.TypeOf((*MockDBService)(nil).UpdateCar), arg0)
}
